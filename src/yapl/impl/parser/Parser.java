/* Generated By:JavaCC: Do not edit this line. Parser.java */
package yapl.impl.parser;
import java.io.*;

import yapl.impl.BackendMJ;
import yapl.impl.compiler.*;
import yapl.impl.symbolcheck.SymbolImpl;
import yapl.impl.symbolcheck.SymboltableImpl;
import yapl.interfaces.*;
import yapl.lib.*;
import java.util.*;



public class Parser implements ParserConstants {
  public static String programName;
  public static SymboltableImpl table = new SymboltableImpl();
  public static Token errorToken;
  public static RecordType recordType;
  public static Type returnType = null;
  public static boolean hasReturn = false;
  public static SymbolImpl var = null;

  public static BackendBinSM backend = new BackendMJ();
  public static CodeGen codegen = new CodeGenAsMJ(backend);

  public static void main(String args []) throws ParseException, FileNotFoundException, TokenMgrError, YAPLException, IOException
  {
    try
    {
      Parser parser = new Parser(new FileInputStream(args [0]));
      codegen.setOutFile(new FileOutputStream(args[1]));
      parser.Program();
      CompilerMessage.printOK(Parser.programName);
    }
    catch (TokenMgrError e)
    {
      CompilerMessage.printError(e, Parser.programName);
    }
    catch (ParseException e)
    {
      CompilerMessage.printError(e, Parser.programName);
    }
    catch (YAPLException e)
    {
          CompilerMessage.printError(e, Parser.programName);
        }
  }

  public static SymbolImpl lookup(int errorNumber, SymbolImpl sym, Token t) throws YAPLException {
    SymbolImpl s = (SymbolImpl) table.lookup(t.toString());
    if(s == null) {
                throw new YAPLException(errorNumber, sym, t);
        }
        return s;
  }

  public static void isValidIntOp(Token t, Type type1, Type type2, int errorNumber) throws YAPLException {
        if(!(type1 instanceof IntType) || !(type2 instanceof IntType)) {
      throw new YAPLException(errorNumber, null, t);
    }
  }

  static final public Type Literal() throws ParseException, YAPLException {
        Token t;
        Attrib a = new AttribImpl();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUTHVALUE:
      t = jj_consume_token(TRUTHVALUE);
                errorToken = t;
                a.setInteger(t.toString().equals("True") ? 1 : 0);
                codegen.loadValue(a);
                {if (true) return new BoolType();}
      break;
    case number:
      t = jj_consume_token(number);
                errorToken = t;
                a.setInteger(Integer.parseInt(t.toString()));
                codegen.loadValue(a);
                {if (true) return new IntType();}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Type Selector(Type input) throws ParseException, YAPLException {
  Type type = null;
  Token t;
  boolean record = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case openingBrackets:
      t = jj_consume_token(openingBrackets);
      type = Expr();
      if(!(input instanceof ArrayType)) {
                {if (true) throw new YAPLException(20, null, t);}
      }
      t = jj_consume_token(closingBrackets);
          if(!(type instanceof IntType)) {
                {if (true) throw new YAPLException(21, null, t);}
          }
      break;
    case dot:
      t = jj_consume_token(dot);
      errorToken = jj_consume_token(ident);
                record = true;
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if(input instanceof ArrayType) {
      if(record) {
                        {if (true) throw new YAPLException(39, null, t);}
      }
                type = (((ArrayType)input).getSubarray());
        }

        if(input instanceof RecordType) {
                RecordType rec = (RecordType) input;
        type = lookup(40, null, errorToken).getType();
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case openingBrackets:
    case dot:
      type = Selector(type);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  static final public Type ArrayLen() throws ParseException, YAPLException {
        Token t;
        Type type;
    jj_consume_token(hash);
    t = jj_consume_token(ident);
    SymbolImpl sym = lookup(11, null, t);
    if(sym.getKind() != 2 && sym.getKind() != 6) {
                {if (true) throw new YAPLException(12, sym, t);}
        }
        if(!(sym.getType() instanceof ArrayType) || ((ArrayType)sym.getType()).getDim() < 1) {
                {if (true) throw new YAPLException(22, null, t);}
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case openingBrackets:
    case dot:
      type = Selector(sym.getType());
            if(!(type instanceof ArrayType) || ((ArrayType)type).getDim() < 1) {
                        {if (true) throw new YAPLException(22, null, t);}
                }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    {if (true) return new IntType();}
    throw new Error("Missing return statement in function");
  }

  static final public Type PrimaryExpr() throws ParseException, YAPLException {
        Token t = null;
        Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUTHVALUE:
    case number:
      type = Literal();
                     {if (true) return type;}
      break;
    case openingParenthesis:
      jj_consume_token(openingParenthesis);
      type = Expr();
      jj_consume_token(closingParenthesis);
                                                                {if (true) return type;}
      break;
    default:
      jj_la1[6] = jj_gen;
      if (jj_2_2(1)) {
        if (jj_2_1(2147483647) && (getToken(2).kind == openingParenthesis)) {
          type = ProcedureCall(true);
      {if (true) return type;}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ident:
            t = jj_consume_token(ident);
    errorToken = t;
    SymbolImpl sym = lookup(11, null, t);
    if(sym.getKind() != 2 && sym.getKind() != 3 && sym.getKind() != 6) {
                {if (true) throw new YAPLException(12, sym, t);}
        }
        type = sym.getType();
        var = sym;

        codegen.loadVariable(sym);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case openingBrackets:
            case dot:
              type = Selector(type);
                  if(!(sym.getType() instanceof ArrayType) || ((ArrayType)sym.getType()).getDim() <  1) {
                    if(!(sym.getType() instanceof RecordType)) {
                                {if (true) throw new YAPLException(20, null, errorToken);}
                        }
                  }
              break;
            default:
              jj_la1[4] = jj_gen;
              ;
            }
                {if (true) return type;}
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case hash:
          type = ArrayLen();
                      {if (true) return type;}
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Type UnaryExpr() throws ParseException, YAPLException {
        Token t = null;
        Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case plus:
    case minus:
      t = AddOp();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    type = PrimaryExpr();
    if(t != null && !(type instanceof IntType)) {
                {if (true) throw new YAPLException(23, null, t);}
    }
    if(t != null) {
            codegen.op1(t, null);
        }
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  static final public Type MulExpr() throws ParseException, YAPLException {
        Token t;
        Type type1;
        Type type2;
    type1 = UnaryExpr();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case multiply:
      case divide:
      case modulo:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_1;
      }
      t = MulOp();
      type2 = UnaryExpr();
      isValidIntOp(t, type1, type2, 24);
      codegen.op2(null, t, null);
    }
    {if (true) return type1;}
    throw new Error("Missing return statement in function");
  }

  static final public Type AddExpr() throws ParseException, YAPLException {
        Token t;
        Type type1;
        Type type2;
    type1 = MulExpr();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case plus:
      case minus:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
      t = AddOp();
      type2 = MulExpr();
      isValidIntOp(t, type1, type2, 24);
      codegen.op2(null, t, null);
    }
    {if (true) return type1;}
    throw new Error("Missing return statement in function");
  }

  static final public Type RelExpr() throws ParseException, YAPLException {
        Token t;
        Type type1;
        Type type2;
    type1 = AddExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case less:
    case lessequal:
    case greater:
    case greaterequal:
      t = RelOp();
      type2 = AddExpr();
      isValidIntOp(t, type1, type2, 25);
      codegen.op2(null, t, null);
      {if (true) return new BoolType();}
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    {if (true) return type1;}
    throw new Error("Missing return statement in function");
  }

  static final public Type EqualExpr() throws ParseException, YAPLException {
        Token t;
        Type type1;
        Type type2;
    type1 = RelExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case equals:
    case nequals:
      t = EqualOp();
      type2 = RelExpr();
            if(!(type1.getClass().equals(type2.getClass()))) {
                        {if (true) throw new YAPLException(26, null, t);}
                }
                codegen.op2(null, t, null);
                {if (true) return new BoolType();}
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
        {if (true) return type1;}
    throw new Error("Missing return statement in function");
  }

  static final public Type CondAndExpr() throws ParseException, YAPLException {
        Token t;
        Type type1;
        Type type2;
    type1 = EqualExpr();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANDOP:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
      t = jj_consume_token(ANDOP);
      type2 = EqualExpr();
            if(!(type1 instanceof BoolType) || !(type2 instanceof BoolType)) {
                        {if (true) throw new YAPLException(24, null, t);}
                }
                codegen.op2(null, t, null);
    }
    {if (true) return type1;}
    throw new Error("Missing return statement in function");
  }

  static final public Type CreationExpr() throws ParseException, YAPLException {
  Type type;
  Type arraytype;
  ArrayType arr;
  Token t = null;
  Token newOp;
    newOp = jj_consume_token(NEWOP);
    type = NonArrayType();
    arr = new ArrayType(0, type);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case openingBrackets:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_4;
      }
      t = jj_consume_token(openingBrackets);
      arraytype = Expr();
      jj_consume_token(closingBrackets);
        if(!(arraytype instanceof IntType)) {
                        {if (true) throw new YAPLException(21, null, t);}
        }

                arr.incDim();
    }
        if(t == null) {
                if(!(type instanceof RecordType)) {
                                {if (true) throw new YAPLException(41, null, newOp);}
                }
                        {if (true) return type;}
        }
    {if (true) return arr;}
    throw new Error("Missing return statement in function");
  }

  static final public Type Expr() throws ParseException, YAPLException {
        Token t;
        Type type1;
        Type type2;
    if (jj_2_3(1)) {
      type1 = CondAndExpr();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OROP:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_5;
        }
        t = jj_consume_token(OROP);
        type2 = CondAndExpr();
                if(!(type1 instanceof BoolType) || !(type2 instanceof BoolType)) {
                        {if (true) throw new YAPLException(24, null, t);}
                }
                codegen.op2(null, t, null);
      }
        {if (true) return type1;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEWOP:
        type1 = CreationExpr();
  {if (true) return type1;}
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public int ArgumentList(ProcedureType proc, SymbolImpl sym) throws ParseException, YAPLException {
  Type type;
  int args = 0;
    type = Expr();
    try {
            if(!proc.hasParam(args, type)) {
                        {if (true) throw new YAPLException(30, sym, errorToken, ++args);}
                }
         } catch (IndexOutOfBoundsException e) {
                if(proc.getParameterCount() > 0) {
                        {if (true) throw new YAPLException(30, sym, errorToken, ++args);}
            }
        }
        args++;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case colon:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      jj_consume_token(colon);
      type = Expr();
        try {
                if(!proc.hasParam(args, type)) {
                                {if (true) throw new YAPLException(30, sym, errorToken, ++args);}
                        }
                } catch (IndexOutOfBoundsException e) {
                        {if (true) throw new YAPLException(30, sym, errorToken, ++args);}
                }
                args++;
    }
        {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  static final public Type ProcedureCall(boolean checkVoid) throws ParseException, YAPLException {
        Token t;
        boolean hasParams = false;
        int args = 0;
        List<Attrib > attribs;
    t = jj_consume_token(ident);
    jj_consume_token(openingParenthesis);
        SymbolImpl sym = lookup(11, null, t);
        if(sym.getKind() != 1) {
                {if (true) throw new YAPLException(12, sym, t);}
        }
        if(checkVoid) {
          if(sym.getType() instanceof VoidType) {
                {if (true) throw new YAPLException(27, null, t);}
      }
        }
    if (jj_2_4(1)) {
      args = ArgumentList((ProcedureType)sym.getProcedureParams(), sym);
                hasParams = true;
    } else {
      ;
    }
    t = jj_consume_token(closingParenthesis);
            if(((ProcedureType)sym.getProcedureParams()).getParameterCount() > args || (!hasParams && ((ProcedureType)sym.getProcedureParams()).getParameterCount() > 0)) {
                        {if (true) throw new YAPLException(32, sym, t);}
                }
                if(((ProcedureType)sym.getProcedureParams()).getParameterCount() < args) {
                        {if (true) throw new YAPLException(30, sym, errorToken, args);}
                }

                codegen.callProc(sym, null);

    {if (true) return sym.getType();}
    throw new Error("Missing return statement in function");
  }

  static final public void Assignment() throws ParseException, YAPLException {
  Token t;
  Type type;
  Token identToken;
  Type l = null;
  Boolean selector = false;
    identToken = jj_consume_token(ident);
    SymbolImpl sym = lookup(11, null, identToken);
    if(sym.getKind() != 2 && sym.getKind() != 6) {
                {if (true) throw new YAPLException(12, sym, identToken);}
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case openingBrackets:
    case dot:
      l = Selector(sym.getType());
      selector = true;
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    t = jj_consume_token(assignOp);
    type = Expr();
        codegen.storeVariable(sym);

    if(!selector && !(sym.getType().getClass().equals(type.getClass()))) {
      {if (true) throw new YAPLException(29, null, t);}
        }
        if(selector && !(l.getClass().equals(type.getClass()))) {
                if(l.getClass().equals(RecordType.class)) {
                        {if (true) throw new YAPLException(39, null, t);}
                }
                {if (true) throw new YAPLException(29, null, t);}
        }
        if(!selector) {
                if(type instanceof ArrayType) {
                        if(!(sym.getType() instanceof ArrayType) || ((ArrayType)type).getDim() != ((ArrayType)sym.getType()).getDim()) {
                                {if (true) throw new YAPLException(29, null, t);}
                        }
                }
                 if(type instanceof RecordType) {
                        RecordType other = (RecordType) lookup(11, null, identToken).getType();
                        if(!((RecordType)type).equalField(other)) {
                                {if (true) throw new YAPLException(29, null, t);}
                        }

                }
        }
  }

  static final public void IfStatement() throws ParseException, YAPLException {
        Type type;
    jj_consume_token(IF);
    type = Expr();
   if(!(type instanceof BoolType)) {
        {if (true) throw new YAPLException(33, null, errorToken);}
   }
    jj_consume_token(THEN);
    StatementList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      StatementList();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
  }

  static final public void WhileStatement() throws ParseException, YAPLException {
        Type type;
    jj_consume_token(WHILE);
    type = Expr();
    if(!(type instanceof BoolType)) {
         {if (true) throw new YAPLException(33, null, errorToken);}
    }
    jj_consume_token(DO);
    StatementList();
    jj_consume_token(ENDWHILE);
  }

  static final public void ReturnStatement() throws ParseException, YAPLException {
    errorToken = jj_consume_token(RETURN);
    hasReturn = true;
    if (jj_2_5(1)) {
      returnType = Expr();
    } else {
      ;
    }
  }

  static final public void WriteStatement() throws ParseException, YAPLException {
        Token t;
    jj_consume_token(WRITE);
    t = jj_consume_token(string);
    codegen.writeString(t.toString());
  }

  static final public void Statement() throws ParseException, YAPLException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      IfStatement();
      break;
    case WHILE:
      WhileStatement();
      break;
    case RETURN:
      ReturnStatement();
      break;
    case WRITE:
      WriteStatement();
      break;
    default:
      jj_la1[21] = jj_gen;
      if (jj_2_7(1)) {
        if (jj_2_6(2147483647) && (getToken(2).kind != openingParenthesis)) {
          Assignment();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ident:
            ProcedureCall(false);
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BEGIN:
        case DECLARE:
          Block();
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void StatementList() throws ParseException, YAPLException {
    label_7:
    while (true) {
      if (jj_2_8(1)) {
        ;
      } else {
        break label_7;
      }
      Statement();
      jj_consume_token(DELIMITER);
    }
  }

  static final public Token Block() throws ParseException, YAPLException {
        Token t;
        table.openScope(false);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARE:
      Decl();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(BEGIN);
    StatementList();
    t = jj_consume_token(END);
    table.closeScope();
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Type NonArrayType() throws ParseException, YAPLException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
            {if (true) return new IntType();}
      break;
    case BOOL:
      jj_consume_token(BOOL);
             {if (true) return new BoolType();}
      break;
    case ident:
      t = jj_consume_token(ident);
  SymbolImpl sym = lookup(11, null, t);
  if(sym.getKind() != 4) {
        {if (true) throw new YAPLException(12, sym, t);}
  }
  {if (true) return sym.getType();}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException, YAPLException {
        Type type;
        ArrayType temp;
    type = NonArrayType();
    temp = new ArrayType(0, type);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case openingBrackets:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_8;
      }
      jj_consume_token(openingBrackets);
      jj_consume_token(closingBrackets);
                                             temp.incDim();
    }
        {if (true) return temp.getDim() > 0 ? temp : type;}
    throw new Error("Missing return statement in function");
  }

  static final public Type ReturnType() throws ParseException, YAPLException {
        Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
             {if (true) return new VoidType();}
      break;
    case INT:
    case BOOL:
    case ident:
      type = Type();
                  {if (true) return type;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ConstDecl() throws ParseException, YAPLException {
        Token t;
        Type type;
    jj_consume_token(CONSTANT);
    t = jj_consume_token(ident);
    jj_consume_token(constAssignOp);
    type = Literal();
    jj_consume_token(DELIMITER);
    SymbolImpl sym = new SymbolImpl();
    sym.setName(t.toString());
    sym.setKind(3);
    sym.setType(type);

        codegen.allocVariable(sym);
        codegen.storeVariable(sym);

    table.addSymbol(sym, t);
  }

  static final public void VarDecl() throws ParseException, YAPLException {
        Token t;
        Token t2;
        Type type;
        t2 = null;
    type = Type();
    t = jj_consume_token(ident);
    SymbolImpl sym = new SymbolImpl();
    sym.setName(t.toString());
    sym.setKind(2);
    sym.setType(type);

        codegen.allocVariable(sym);

    table.addSymbol(sym, t);
    if(recordType != null) {
                recordType.addField(sym);
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case colon:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_9;
      }
      jj_consume_token(colon);
      t2 = jj_consume_token(ident);
        if(t2 != null) {
                SymbolImpl sym2 = new SymbolImpl();
                sym2.setName(t2.toString());
                sym2.setKind(2);
                sym2.setType(type);

                        codegen.allocVariable(sym2);

                table.addSymbol(sym2, t2);
                 if(recordType != null) {
                                recordType.addField(sym2);
                         }
            }
    }
    jj_consume_token(DELIMITER);
  }

  static final public void TypeDecl() throws ParseException, YAPLException {
        Token t;
    table.openScope(true);
    jj_consume_token(RECORD);
    t = jj_consume_token(ident);
    VarDecl();
    SymbolImpl sym = new SymbolImpl();
    sym.setName(t.toString());
    sym.setKind(4);
    sym.setType(new RecordType());
    table.addSymbol(sym, t);
    recordType = (RecordType) sym.getType();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOL:
      case ident:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_10;
      }
      VarDecl();
    }
    jj_consume_token(ENDRECORD);
    jj_consume_token(DELIMITER);
    table.closeScope();
    recordType = null;
  }

  static final public void Decl() throws ParseException, YAPLException {
    jj_consume_token(DECLARE);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOL:
      case CONSTANT:
      case RECORD:
      case ident:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
        ConstDecl();
        break;
      case INT:
      case BOOL:
      case ident:
        VarDecl();
        break;
      case RECORD:
        TypeDecl();
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public ProcedureType FormalParam(ProcedureType proc) throws ParseException, YAPLException {
        Token t;
        Type type;
    type = Type();
    t = jj_consume_token(ident);
    SymbolImpl sym = new SymbolImpl();
    sym.setName(t.toString());
    sym.setKind(6);
    sym.setType(type);
    table.addSymbol(sym, t);

    proc.addParam(type);
    {if (true) return proc;}
    throw new Error("Missing return statement in function");
  }

  static final public Type FormalParamList(ProcedureType proc) throws ParseException, YAPLException {
    proc = FormalParam(proc);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case colon:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_12;
      }
      jj_consume_token(colon);
      FormalParam(proc);
    }
    {if (true) return proc;}
    throw new Error("Missing return statement in function");
  }

  static final public void Procedure() throws ParseException, YAPLException {
        Token t;
        Token t2;
        Type type;
    jj_consume_token(PROCEDURE);
    type = ReturnType();
    t = jj_consume_token(ident);
    jj_consume_token(openingParenthesis);
    SymbolImpl sym = new SymbolImpl();
    sym.setName(t.toString());
    sym.setKind(1);
    sym.setType(type);
    sym.setGlobal(true);
    table.openScope(true);
    table.setParentSymbol(sym, t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOL:
    case ident:
      type = FormalParamList(new ProcedureType());
                sym.setProcedureParams(type);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    returnType = null;
    hasReturn = false;
    jj_consume_token(closingParenthesis);
    t2 = Block();
    t = jj_consume_token(ident);
    jj_consume_token(DELIMITER);
        if(!table.getNearestParentSymbol(1).getName().equals(t.toString())) {
                {if (true) throw new YAPLException(13, sym, t);}
        }
    table.closeScope();
    if(returnType == null && !(sym.getType() instanceof VoidType) && !hasReturn) {
                {if (true) throw new YAPLException(35, sym, t2);}
    }
    if((returnType == null && !(sym.getType() instanceof VoidType)) || (returnType != null && !(sym.getType().getClass().equals(returnType.getClass())))) {
                if(sym.getType() instanceof VoidType) {
                        {if (true) throw new YAPLException(37, sym, errorToken);}
                }
                {if (true) throw new YAPLException(36, sym, errorToken);}
    }
  }

  static final public void Program() throws ParseException, YAPLException, IOException {
  Token t;
    jj_consume_token(PROGRAM);
    t = jj_consume_token(ident);
    Parser.programName = t.toString();

    table.openScope(true);
    SymbolImpl sym = new SymbolImpl();
    sym.setName(t.toString());
    sym.setKind(0);
    table.setParentSymbol(sym, t);

    codegen.enterProc(sym);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARE:
      case PROCEDURE:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARE:
        Decl();
        break;
      case PROCEDURE:
        Procedure();
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    returnType = null;
    jj_consume_token(BEGIN);
    StatementList();
    jj_consume_token(END);
    t = jj_consume_token(ident);
    jj_consume_token(dot);
        codegen.exitProc(sym);
        codegen.writeObjectFile();

        if(!table.getNearestParentSymbol(0).getName().equals(t.toString())) {
                {if (true) throw new YAPLException(13, sym, t);}
        }
        if(returnType != null) {
                {if (true) throw new YAPLException(38, null, errorToken);}
        }
        table.closeScope();
  }

  static final public Token RelOp() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case less:
      t = jj_consume_token(less);
                 {if (true) return t;}
      break;
    case lessequal:
      t = jj_consume_token(lessequal);
                      {if (true) return t;}
      break;
    case greaterequal:
      t = jj_consume_token(greaterequal);
                         {if (true) return t;}
      break;
    case greater:
      t = jj_consume_token(greater);
                    {if (true) return t;}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token EqualOp() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case equals:
      t = jj_consume_token(equals);
                   {if (true) return t;}
      break;
    case nequals:
      t = jj_consume_token(nequals);
                    {if (true) return t;}
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token AddOp() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case plus:
      t = jj_consume_token(plus);
                 {if (true) return t;}
      break;
    case minus:
      t = jj_consume_token(minus);
                  {if (true) return t;}
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token MulOp() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case multiply:
      t = jj_consume_token(multiply);
                     {if (true) return t;}
      break;
    case divide:
      t = jj_consume_token(divide);
                   {if (true) return t;}
      break;
    case modulo:
      t = jj_consume_token(modulo);
                   {if (true) return t;}
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(NEWOP)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(minus)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(plus)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(hash)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    if (jj_scan_token(BEGIN)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(ident)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(2).kind != openingParenthesis;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(ident)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(WRITE)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(DECLARE)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(ident)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(ident)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(number)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(2).kind == openingParenthesis;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(openingParenthesis)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(TRUTHVALUE)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(ident)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x0,0x0,0x0,0x0,0x0,0x40000040,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x100,0x200,0x0,0x0,0x1000,0x0,0x64400,0x4080000,0x4000000,0x600000,0x0,0x10600000,0x0,0x600000,0x1e00000,0x1e00000,0x0,0x600000,0xc000000,0xc000000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80000,0x9,0x9,0x9,0x9,0x40000,0x80000,0x4,0x1800,0xe000,0x1800,0x780,0x30000,0x0,0x1,0x0,0x0,0x10,0x9,0x0,0x40000,0x0,0x0,0x0,0x40000,0x1,0x40000,0x10,0x40000,0x40000,0x40000,0x10,0x40000,0x0,0x0,0x780,0x30000,0x1800,0xe000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 39; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
