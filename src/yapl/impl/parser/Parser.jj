/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Parser)
package yapl.impl.parser;
import java.io.*;

import yapl.impl.BackendMJ;
import yapl.impl.compiler.*;
import yapl.impl.symbolcheck.SymbolImpl;
import yapl.impl.symbolcheck.SymboltableImpl;
import yapl.interfaces.*;
import yapl.lib.*;
import java.util.*;



public class Parser
{
  public static String programName;
  public static SymboltableImpl table = new SymboltableImpl();
  public static Token errorToken;
  public static RecordType recordType;
  public static Type returnType = null;
  public static boolean hasReturn = false;
  public static SymbolImpl var = null;
  public static int countLocalOffset = 0;
  public static int incWhileLabels = 1;
  public static int incIfLabels = 1; 

  public static BackendBinSM backend = new BackendMJ();
  public static CodeGen codegen = new CodeGenAsMJ(backend);

  public static void main(String args []) throws ParseException, FileNotFoundException, TokenMgrError, YAPLException, IOException
  {
    try
    {
      Parser parser = new Parser(new FileInputStream(args [0]));
      codegen.setOutFile(new FileOutputStream(args[1]));
      parser.Program();
      CompilerMessage.printOK(Parser.programName);
    }
    catch (TokenMgrError e)
    {
      CompilerMessage.printError(e, Parser.programName);
    }
    catch (ParseException e)
    {
      CompilerMessage.printError(e, Parser.programName);
    }
    catch (YAPLException e)
    {
	  CompilerMessage.printError(e, Parser.programName);
   	} 
  }

  public static SymbolImpl lookup(int errorNumber, SymbolImpl sym, Token t) throws YAPLException {
    SymbolImpl s = (SymbolImpl) table.lookup(t.toString());
    if(s == null) {
		throw new YAPLException(errorNumber, sym, t);
  	}
  	return s;
  }

  public static void isValidIntOp(Token t, Type type1, Type type2, int errorNumber) throws YAPLException {
	if(!(type1 instanceof IntType) || !(type2 instanceof IntType)) {
      throw new YAPLException(errorNumber, null, t);
    }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  //---KEYWORDS---
  < PROGRAM : "Program" >
| < TRUTHVALUE :
    "True"
  | "False" >
| < ANDOP : "And" >
| < OROP : "Or" >
| < NEWOP : "new" >
| < IF : "If" >
| < THEN : "Then" >
| < ELSE : "Else" >
| < ENDIF : "EndIf" >
| < WHILE : "While" >
| < DO : "Do" >
| < ENDWHILE : "EndWhile" >
| < RETURN : "Return" >
| < WRITE : "Write" >
| < BEGIN : "Begin" >
| < END : "End" >
| < INT : "int" >
| < BOOL : "bool" >
| < CONSTANT : "Const" >
| < RECORD : "Record" >
| < ENDRECORD : "EndRecord" >
| < DECLARE : "Declare" >
| < PROCEDURE : "Procedure" >
| < VOID : "void" >
| < DELIMITER : ";" >
  //---TOKENS---
| < openingParenthesis : "(" >
| < closingParenthesis : ")" >
| < openingBrackets : "[" >
| < closingBrackets : "]" >
| < hash : "#" >
| < dot : "." >
| < colon : "," >
| < assignOp : ":=" >
| < constAssignOp : "=" >
| < less : "<" >
| < lessequal : "<=" >
| < greater : ">" >
| < greaterequal : ">=" >
| < plus : "+" >
| < minus : "-" >
| < multiply : "*" >
| < divide : "/" >
| < modulo : "%" >
| < equals : "==" >
| < nequals : "!=" >
| < ident :
    < letter >
    (
      < letter >
    | < digit >
    )* >
| < number : < digit > (< digit >)* >
| < letter :
    [ "A"-"Z" ]
  | [ "a"-"z" ]
  | "_" >
| < digit : [ "0"-"9" ] >
| < otherchar :
    "+"
  | "-"
  | "*"
  | "/"
  | "."
  | ","
  | ";"
  | ":"
  | "!"
  | 
    "?"
  | "="
  | "#"
  | "%"
  | "<"
  | ">"
  | "$"
  | "("
  | ")"
  | 
    "["
  | "]"
  | "{"
  | "}"
  | "\\"
  | "@"
  | "&"
  | "^"
  | "|" >
| < string :
    "\""
    (
      " "
    | < letter >
    | < digit >
    | < otherchar >
    )*
    "\"" >
}

SPECIAL_TOKEN :
{
  < comment: "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">
}

Type Literal() throws YAPLException :
{
	Token t;
	Attrib a = new AttribImpl();
}
{
  t = < TRUTHVALUE >
  	{
  	  	errorToken = t;
  		a.setInteger(t.toString().equals("True") ? 1 : 0);
  		codegen.loadValue(a);
  		return new BoolType();
  	}
| t = < number >
	{
	  	errorToken = t;
		a.setInteger(Integer.parseInt(t.toString()));
		codegen.loadValue(a);
		return new IntType();
	}
}

Type Selector(Type input) throws YAPLException :
{
  Type type = null;
  Token t;
  boolean record = false;
}
{
  (
    t = < openingBrackets > type = Expr()
    {
      if(!(input instanceof ArrayType)) {
		throw new YAPLException(20, null, t);
      }  
    }
    t = < closingBrackets >
    {
	  if(!(type instanceof IntType)) {
		throw new YAPLException(21, null, t);
	  } 
	}
  |t = < dot > errorToken = < ident > {
		record = true;
  }
  )
  {
    if(input instanceof ArrayType) {
      if(record) {
			throw new YAPLException(39, null, t);
      } 
		type = (((ArrayType)input).getSubarray());	
	}

	if(input instanceof RecordType) {
	  	RecordType rec = (RecordType) input;
        type = lookup(40, null, errorToken).getType();
	}
  }
  (
    type = Selector(type)
  )?
  {
    return type;
  }
}

Type ArrayLen() throws YAPLException :
{
	Token t;
	Type type;
}
{
  < hash > t = < ident >
  {
    SymbolImpl sym = lookup(11, null, t);
    if(sym.getKind() != 2 && sym.getKind() != 6) {
		throw new YAPLException(12, sym, t);
	}
	if(!(sym.getType() instanceof ArrayType) || ((ArrayType)sym.getType()).getDim() < 1) {
		throw new YAPLException(22, null, t);
	}
	
	codegen.loadVariable(sym);
	codegen.arrayLength(null);
  }
  (
    type = Selector(sym.getType())
    {
	    if(!(type instanceof ArrayType) || ((ArrayType)type).getDim() < 1) {
			throw new YAPLException(22, null, t);
		}
    }
  )?
  {
    return new IntType();
  }
}

Type PrimaryExpr() throws YAPLException :
{
	Token t = null;
	Type type;
}
{
  type = Literal() { return type; }
| < openingParenthesis > type = Expr() < closingParenthesis > { return type; }
|
  (
    LOOKAHEAD( t = < ident >, { getToken(2).kind == openingParenthesis })
    type = ProcedureCall(true)
    {
      return type;
    }
  | t = < ident >
  {
    errorToken = t;
    SymbolImpl sym = lookup(11, null, t);
    if(sym.getKind() != 2 && sym.getKind() != 3 && sym.getKind() != 6) {
		throw new YAPLException(12, sym, t);
  	}
  	type = sym.getType();
  	var = sym;

	codegen.loadVariable(sym);
  }
    (
      type = Selector(type)
      {
		  if(!(sym.getType() instanceof ArrayType) || ((ArrayType)sym.getType()).getDim() <  1) {
		    if(!(sym.getType() instanceof RecordType)) { 
				throw new YAPLException(20, null, errorToken);
			}
 		  }

 		  codegen.loadArrayElement();
      }
    )?
    {     
		return type;
    }
  )
| type = ArrayLen() { return type; }
}

Type UnaryExpr() throws YAPLException :
{
  	Token t = null;
	Type type;
}
{
  (
    t = AddOp()
  )?
  type = PrimaryExpr()
  {
    if(t != null && !(type instanceof IntType)) {
		throw new YAPLException(23, null, t);
    }
    if(t != null) {
	    codegen.op1(t, null);
  	}  
    return type;
  }
}

Type MulExpr() throws YAPLException :
{
  	Token t;
	Type type1;
	Type type2;
}
{
  type1 =  UnaryExpr()
  (
    t = MulOp() type2 = UnaryExpr()
    {
      isValidIntOp(t, type1, type2, 24);
      codegen.op2(null, t, null);
    }
  )*
  {
    return type1;
  }  
}

Type AddExpr() throws YAPLException :
{
  	Token t;
	Type type1;
	Type type2;
}
{
  type1 = MulExpr()
  (
    t = AddOp() type2 = MulExpr()
    {
      isValidIntOp(t, type1, type2, 24);
      codegen.op2(null, t, null);
    }
  )*
  {
    return type1;
  } 
}

Type RelExpr() throws YAPLException :
{
	Token t;
	Type type1;
	Type type2;
}
{
  type1 = AddExpr()
  (
    t = RelOp() type2 = AddExpr()
    {
      isValidIntOp(t, type1, type2, 25);
      codegen.op2(null, t, null);
      return new BoolType();
    }
  )?
  {
    return type1;
  } 
}

Type EqualExpr() throws YAPLException :
{
	Token t;
	Type type1;
	Type type2;
}
{
  type1 = RelExpr()
  (
    t = EqualOp() type2 = RelExpr()
    {
	    if(!(type1.getClass().equals(type2.getClass()))) {
			throw new YAPLException(26, null, t);
	  	}
	  	codegen.op2(null, t, null);
	  	return new BoolType();
    }
  )?
  {
  	return type1;  
  }
}

Type CondAndExpr() throws YAPLException :
{
	Token t;
	Type type1;
	Type type2;
}
{
  type1 = EqualExpr()
  (
    t = < ANDOP > type2 = EqualExpr()
    { 
	    if(!(type1 instanceof BoolType) || !(type2 instanceof BoolType)) {
			throw new YAPLException(24, null, t);
	  	}
	  	codegen.op2(null, t, null);
    }
  )*
  {
    return type1;
  }
}

Type CreationExpr()  throws YAPLException :
{
  Type type;
  Type arraytype;
  ArrayType arr;
  Token t = null;
  Token newOp;
}
{
  newOp = < NEWOP > type = NonArrayType()
  {
    arr = new ArrayType(0, type);
  }
  (
    t = < openingBrackets > arraytype = Expr() < closingBrackets >
    {
      	if(!(arraytype instanceof IntType)) {
			throw new YAPLException(21, null, t);
        }

		arr.incDim();
    }
  )*
  {
    
        if(t == null) {
          	if(!(type instanceof RecordType)) {
				throw new YAPLException(41, null, newOp);
          	}
			return type;
        }

		codegen.allocArray(arr);
        
    	return arr;
  }
}

Type Expr() throws YAPLException :
{
	Token t;
	Type type1;
	Type type2;
}
{
  type1 = CondAndExpr()
  (
    t = < OROP > type2 = CondAndExpr()
    {
		if(!(type1 instanceof BoolType) || !(type2 instanceof BoolType)) {
			throw new YAPLException(24, null, t);
  		}
  		codegen.op2(null, t, null);
    }
  )*
  {
  	return type1;
  }
| type1 = CreationExpr()
{
  return type1;
}

}

int ArgumentList(ProcedureType proc, SymbolImpl sym) throws YAPLException :
{
  Type type;
  int args = 0;
}
{
  type = Expr()
  {
    try {
	    if(!proc.hasParam(args, type)) {
			throw new YAPLException(30, sym, errorToken, ++args);
	  	}
	 } catch (IndexOutOfBoundsException e) {
	   	if(proc.getParameterCount() > 0) { 
			throw new YAPLException(30, sym, errorToken, ++args);
	    }	
	}
  	args++;
  }
  (
    < colon > type = Expr()
    {
      	try {
	    	if(!proc.hasParam(args, type)) {
				throw new YAPLException(30, sym, errorToken, ++args);
	  		}
	 	} catch (IndexOutOfBoundsException e) {
			throw new YAPLException(30, sym, errorToken, ++args);
		}  	
	  	args++;
  }
  )*
  {
  	return args;  
  }
}

Type ProcedureCall(boolean checkVoid) throws YAPLException :
{
	Token t;
	boolean hasParams = false;
	int args = 0;
	List<Attrib > attribs;
}
{
  t = < ident > < openingParenthesis >
  {
	SymbolImpl sym = lookup(11, null, t);
	if(sym.getKind() != 1) {
		throw new YAPLException(12, sym, t);
	}
	if(checkVoid) {
	  if(sym.getType() instanceof VoidType) {
		throw new YAPLException(27, null, t);
      }  
	}
  }  
  (
    args = ArgumentList((ProcedureType)sym.getProcedureParams(), sym)
    {
		hasParams = true;
	}	
  )?
  t = < closingParenthesis >
  {
	
	    if(((ProcedureType)sym.getProcedureParams()).getParameterCount() > args || (!hasParams && ((ProcedureType)sym.getProcedureParams()).getParameterCount() > 0)) {
			throw new YAPLException(32, sym, t);
	  	}
	  	if(((ProcedureType)sym.getProcedureParams()).getParameterCount() < args) {
			throw new YAPLException(30, sym, errorToken, args);
	 	}
	 	
		codegen.callProc(sym, null);
		
    return sym.getType();  
  }
}

void Assignment() throws YAPLException:
{
  Token t;
  Type type;
  Token identToken;
  Type l = null;
  Boolean selector = false;
}
{
  identToken = < ident >
  {
    SymbolImpl sym = lookup(11, null, identToken);
    if(sym.getKind() != 2 && sym.getKind() != 6) {
		throw new YAPLException(12, sym, identToken);
	}

  }
  (
    { codegen.loadVariable(sym); }
    l = Selector(sym.getType())
    { selector = true; }
  )?
  t = < assignOp > type = Expr()
  {

	if(selector && sym.getType() instanceof ArrayType) {
		codegen.storeArrayElement();
	} else {   
		codegen.storeVariable(sym);
	}	
    
    if(!selector && !(sym.getType().getClass().equals(type.getClass()))) {
      throw new YAPLException(29, null, t); 
  	}
  	if(selector && !(l.getClass().equals(type.getClass()))) {
  	  	if(l.getClass().equals(RecordType.class)) {
			throw new YAPLException(39, null, t);
  		}
		throw new YAPLException(29, null, t);
 	}
 	if(!selector) {
		if(type instanceof ArrayType) {
			if(!(sym.getType() instanceof ArrayType) || ((ArrayType)type).getDim() != ((ArrayType)sym.getType()).getDim()) {
				throw new YAPLException(29, null, t);
			}  
		}
		 if(type instanceof RecordType) {
                	RecordType other = (RecordType) lookup(11, null, identToken).getType();
                	if(!((RecordType)type).equalField(other)) {
                		throw new YAPLException(29, null, t);
                	}
                	
                }
	}    
  } 
}

void IfStatement() throws YAPLException :
{
	Type type;
	Boolean elseBlock = false;
	int labelCountIf = 5 * incIfLabels;
}
{
  < IF > type = Expr()
  {
	incIfLabels++;	
    
   codegen.branchIfFalse(null, "L" + labelCountIf++);
    
   if(!(type instanceof BoolType)) {
	throw new YAPLException(33, null, errorToken);
   }   
  }
  < THEN > StatementList()
  {
    codegen.jump("L" + labelCountIf++);
  }
  (
    {
      codegen.assignLabel("L" + (labelCountIf-2));
      elseBlock = true;
    }
    < ELSE > StatementList()
  )?
  {
    codegen.assignLabel("L" + (labelCountIf-1));
    if (!elseBlock) { 
		codegen.assignLabel("L" + (labelCountIf-2));
	}
  }
  < ENDIF >
}

void WhileStatement() throws YAPLException :
{
	Type type;
	int labelCountWhile = 100 * incWhileLabels;
}
{
  {
    incWhileLabels++;
    codegen.assignLabel("L" + labelCountWhile++);
  }
  < WHILE > type = Expr()
  {
	codegen.branchIfFalse(null, "L" + labelCountWhile++);
    
    if(!(type instanceof BoolType)) {
	 throw new YAPLException(33, null, errorToken);
    }  
  }
  < DO > StatementList()
  {
    codegen.jump("L" + (labelCountWhile-2));
  }
  < ENDWHILE >
  {
    codegen.assignLabel("L" + (labelCountWhile-1));
  }
}

void ReturnStatement() throws YAPLException :
{}
{
  errorToken = < RETURN >
  {
    hasReturn = true;
  }
  (
    returnType = Expr()
  )?
  {
    codegen.exitProc(new SymbolImpl("", 0));
  }
}

void WriteStatement() throws YAPLException :
{
	Token t;
}
{
  < WRITE > t = < string >
  {
    codegen.writeString(t.toString());
  }
}

void Statement() throws YAPLException :
{
}
{
  IfStatement()
| WhileStatement()
| ReturnStatement()
| WriteStatement()
|
  (
    LOOKAHEAD(< ident >, { getToken(2).kind != openingParenthesis })
    Assignment()
  | ProcedureCall(false)
  )
| Block()
}

void StatementList() throws YAPLException :
{}
{
  (
    Statement() < DELIMITER >
  )*
}

Token Block() throws YAPLException :
{
	Token t;
}
{
  {
	table.openScope(false);
  }
  (
    Decl()
  )?
  < BEGIN >
  StatementList()  t = < END >
  {
    table.closeScope();
    return t;
  }
}

Type NonArrayType() throws YAPLException :
{
	Token t;
}
{
  < INT > { return new IntType(); }
| < BOOL > { return new BoolType(); }
| t = < ident > 
{
  SymbolImpl sym = lookup(11, null, t);
  if(sym.getKind() != 4) {
	throw new YAPLException(12, sym, t);
  }
  return sym.getType();
}
}

Type Type() throws YAPLException :
{
	Type type;
	ArrayType temp;
}
{
  type = NonArrayType()
  { temp = new ArrayType(0, type); }
  (< openingBrackets > < closingBrackets > { temp.incDim(); })*
  {
	return temp.getDim() > 0 ? temp : type;
  }
}

Type ReturnType() throws YAPLException :
{
	Type type;
}
{
  < VOID > { return new VoidType(); }
| type = Type() { return type; }
}

void ConstDecl() throws YAPLException :
{
	Token t;
	Type type;
}
{
  < CONSTANT > t = < ident > < constAssignOp >  type = Literal() < DELIMITER >
  {
    SymbolImpl sym = new SymbolImpl();
    sym.setName(t.toString());
    sym.setKind(3);
    sym.setType(type);

	codegen.allocVariable(sym);
	codegen.storeVariable(sym);
    
    table.addSymbol(sym, t);
  }
}

void VarDecl()  throws YAPLException:
{
	Token t;
	Token t2;
	Type type;
}
{
  {
	t2 = null;
  } 
  type = Type() t = < ident >
  {
    SymbolImpl sym = new SymbolImpl();
    sym.setName(t.toString());
    sym.setKind(2);
    sym.setType(type);

	codegen.allocVariable(sym);
    
    table.addSymbol(sym, t);
    if(recordType != null) {
		recordType.addField(sym);
    }
  }
  ("," t2 = < ident >
	{
    	if(t2 != null) {
	      	SymbolImpl sym2 = new SymbolImpl();
	    	sym2.setName(t2.toString());
	    	sym2.setKind(2);
	    	sym2.setType(type);

			codegen.allocVariable(sym2);
	    	
	    	table.addSymbol(sym2, t2);
	    	 if(recordType != null) {
				recordType.addField(sym2);
   			 }
	    }	
  	}
  )* < DELIMITER >
   	
  
}

void TypeDecl()  throws YAPLException:
{
	Token t;
}
{
  {
    table.openScope(true);
  }
  < RECORD > t = < ident > VarDecl()
  {
    SymbolImpl sym = new SymbolImpl();
    sym.setName(t.toString());
    sym.setKind(4);
    sym.setType(new RecordType());
    table.addSymbol(sym, t);
    recordType = (RecordType) sym.getType();
  }
  (
    VarDecl()
  )*
  < ENDRECORD > < DELIMITER >
  {
    table.closeScope();
    recordType = null;
  }
}

void Decl()  throws YAPLException:
{}
{
  < DECLARE >
  (
    ConstDecl()
  | VarDecl()
  | TypeDecl()
  )*
}

ProcedureType FormalParam(ProcedureType proc) throws YAPLException :
{
	Token t;
	Type type;
}
{
  type = Type() t = < ident >
  {
    SymbolImpl sym = new SymbolImpl();
    sym.setName(t.toString());
    sym.setKind(6);
    sym.setType(type);
    sym.setGlobal(false);
    sym.setOffset(countLocalOffset++);
    table.addSymbol(sym, t);

    proc.addParam(type);
    return proc;
  }
}

Type FormalParamList(ProcedureType proc)  throws YAPLException :
{}
{
  proc = FormalParam(proc)
  (
    < colon > FormalParam(proc)
  )*
  {
    countLocalOffset = 0;
    return proc;
  }
}

void Procedure() throws YAPLException :
{
	Token t;
	Token t2;
	Type type;
}
{
  < PROCEDURE > type = ReturnType() t = < ident > < openingParenthesis >
  {
    SymbolImpl sym = new SymbolImpl();
    sym.setName(t.toString());
    sym.setKind(1);
    sym.setType(type);
    sym.setGlobal(true);
    table.openScope(true);
    table.setParentSymbol(sym, t);
  }
  (
    type = FormalParamList(new ProcedureType())
    {
		sym.setProcedureParams(type);
    }
  )?
  {
    returnType = null;
    hasReturn = false;

    codegen.enterProc(sym);
  }
  < closingParenthesis > t2 = Block() t = < ident > < DELIMITER >
  {
	if(!table.getNearestParentSymbol(1).getName().equals(t.toString())) {
		throw new YAPLException(13, sym, t);
	}
    table.closeScope();
    if(returnType == null && !(sym.getType() instanceof VoidType) && !hasReturn) {
		throw new YAPLException(35, sym, t2);
    }
    if((returnType == null && !(sym.getType() instanceof VoidType)) || (returnType != null && !(sym.getType().getClass().equals(returnType.getClass())))) { 
		if(sym.getType() instanceof VoidType) {
			throw new YAPLException(37, sym, errorToken);
		}  
		throw new YAPLException(36, sym, errorToken);
    }

    codegen.exitProc(sym);  
  }
}

void Program() throws YAPLException, IOException:
{
  Token t;
  boolean decl = false;
}
{
  < PROGRAM > t = < ident >
  {
    Parser.programName = t.toString();
    
    table.openScope(true);
    SymbolImpl sym = new SymbolImpl();
    sym.setName(t.toString());
    sym.setKind(0);
    table.setParentSymbol(sym, t);

    codegen.enterProc(sym);
  }
  (
    {
      codegen.assignLabel("Decl");
      decl = true;
    }
    Decl()
    {
      codegen.jump("Begin_" + sym.getName());
    }
  | {
		codegen.jump("Procedures");
    }
    Procedure()
  )*
  {
    returnType = null;
  }
  < BEGIN >
  {
    codegen.assignLabel("Procedures");
    if (decl) { 
    	codegen.jump("Decl");	
	}
    codegen.assignLabel("Begin_" + sym.getName());
  }
  StatementList() < END > t = < ident > < dot >
  {
	codegen.exitProc(sym);
	codegen.writeObjectFile();
    
	if(!table.getNearestParentSymbol(0).getName().equals(t.toString())) {
		throw new YAPLException(13, sym, t);
	}
	if(returnType != null) {
		throw new YAPLException(38, null, errorToken);
	}  
	table.closeScope();
  }
}

Token RelOp() :
{
	Token t;
}
{
  t = < less > { return t; }
| t = < lessequal > { return t; }
| t = < greaterequal > { return t; }
| t = < greater > { return t; }
}

Token EqualOp() :
{
  Token t;
}
{
  t = < equals > { return t; }
| t = < nequals > { return t; }
}

Token AddOp() :
{
	Token t;
}
{
  t = < plus > { return t; }
| t = < minus > { return t; }
}

Token MulOp() :
{
	Token t;
}
{
  t = < multiply > { return t; }
| t = < divide > { return t; }
| t = < modulo > { return t; }
}
